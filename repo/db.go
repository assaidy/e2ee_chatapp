// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package repo

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.beginStmt, err = db.PrepareContext(ctx, begin); err != nil {
		return nil, fmt.Errorf("error preparing query Begin: %w", err)
	}
	if q.checkEmailStmt, err = db.PrepareContext(ctx, checkEmail); err != nil {
		return nil, fmt.Errorf("error preparing query CheckEmail: %w", err)
	}
	if q.checkUsernameStmt, err = db.PrepareContext(ctx, checkUsername); err != nil {
		return nil, fmt.Errorf("error preparing query CheckUsername: %w", err)
	}
	if q.commitStmt, err = db.PrepareContext(ctx, commit); err != nil {
		return nil, fmt.Errorf("error preparing query Commit: %w", err)
	}
	if q.deleteStaleEmailVerificationTokensStmt, err = db.PrepareContext(ctx, deleteStaleEmailVerificationTokens); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteStaleEmailVerificationTokens: %w", err)
	}
	if q.getCredentialsByEmailStmt, err = db.PrepareContext(ctx, getCredentialsByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetCredentialsByEmail: %w", err)
	}
	if q.getEmailVerificationTokenByIDStmt, err = db.PrepareContext(ctx, getEmailVerificationTokenByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetEmailVerificationTokenByID: %w", err)
	}
	if q.getSessionByIDStmt, err = db.PrepareContext(ctx, getSessionByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetSessionByID: %w", err)
	}
	if q.insertCredentialsStmt, err = db.PrepareContext(ctx, insertCredentials); err != nil {
		return nil, fmt.Errorf("error preparing query InsertCredentials: %w", err)
	}
	if q.insertEmailVerificationTokenStmt, err = db.PrepareContext(ctx, insertEmailVerificationToken); err != nil {
		return nil, fmt.Errorf("error preparing query InsertEmailVerificationToken: %w", err)
	}
	if q.insertSessionStmt, err = db.PrepareContext(ctx, insertSession); err != nil {
		return nil, fmt.Errorf("error preparing query InsertSession: %w", err)
	}
	if q.insertUserStmt, err = db.PrepareContext(ctx, insertUser); err != nil {
		return nil, fmt.Errorf("error preparing query InsertUser: %w", err)
	}
	if q.markEmailAsVerifiedStmt, err = db.PrepareContext(ctx, markEmailAsVerified); err != nil {
		return nil, fmt.Errorf("error preparing query MarkEmailAsVerified: %w", err)
	}
	if q.rollbackStmt, err = db.PrepareContext(ctx, rollback); err != nil {
		return nil, fmt.Errorf("error preparing query Rollback: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.beginStmt != nil {
		if cerr := q.beginStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing beginStmt: %w", cerr)
		}
	}
	if q.checkEmailStmt != nil {
		if cerr := q.checkEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkEmailStmt: %w", cerr)
		}
	}
	if q.checkUsernameStmt != nil {
		if cerr := q.checkUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkUsernameStmt: %w", cerr)
		}
	}
	if q.commitStmt != nil {
		if cerr := q.commitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing commitStmt: %w", cerr)
		}
	}
	if q.deleteStaleEmailVerificationTokensStmt != nil {
		if cerr := q.deleteStaleEmailVerificationTokensStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteStaleEmailVerificationTokensStmt: %w", cerr)
		}
	}
	if q.getCredentialsByEmailStmt != nil {
		if cerr := q.getCredentialsByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCredentialsByEmailStmt: %w", cerr)
		}
	}
	if q.getEmailVerificationTokenByIDStmt != nil {
		if cerr := q.getEmailVerificationTokenByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEmailVerificationTokenByIDStmt: %w", cerr)
		}
	}
	if q.getSessionByIDStmt != nil {
		if cerr := q.getSessionByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionByIDStmt: %w", cerr)
		}
	}
	if q.insertCredentialsStmt != nil {
		if cerr := q.insertCredentialsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertCredentialsStmt: %w", cerr)
		}
	}
	if q.insertEmailVerificationTokenStmt != nil {
		if cerr := q.insertEmailVerificationTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertEmailVerificationTokenStmt: %w", cerr)
		}
	}
	if q.insertSessionStmt != nil {
		if cerr := q.insertSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertSessionStmt: %w", cerr)
		}
	}
	if q.insertUserStmt != nil {
		if cerr := q.insertUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertUserStmt: %w", cerr)
		}
	}
	if q.markEmailAsVerifiedStmt != nil {
		if cerr := q.markEmailAsVerifiedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markEmailAsVerifiedStmt: %w", cerr)
		}
	}
	if q.rollbackStmt != nil {
		if cerr := q.rollbackStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing rollbackStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                     DBTX
	tx                                     *sql.Tx
	beginStmt                              *sql.Stmt
	checkEmailStmt                         *sql.Stmt
	checkUsernameStmt                      *sql.Stmt
	commitStmt                             *sql.Stmt
	deleteStaleEmailVerificationTokensStmt *sql.Stmt
	getCredentialsByEmailStmt              *sql.Stmt
	getEmailVerificationTokenByIDStmt      *sql.Stmt
	getSessionByIDStmt                     *sql.Stmt
	insertCredentialsStmt                  *sql.Stmt
	insertEmailVerificationTokenStmt       *sql.Stmt
	insertSessionStmt                      *sql.Stmt
	insertUserStmt                         *sql.Stmt
	markEmailAsVerifiedStmt                *sql.Stmt
	rollbackStmt                           *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                     tx,
		tx:                                     tx,
		beginStmt:                              q.beginStmt,
		checkEmailStmt:                         q.checkEmailStmt,
		checkUsernameStmt:                      q.checkUsernameStmt,
		commitStmt:                             q.commitStmt,
		deleteStaleEmailVerificationTokensStmt: q.deleteStaleEmailVerificationTokensStmt,
		getCredentialsByEmailStmt:              q.getCredentialsByEmailStmt,
		getEmailVerificationTokenByIDStmt:      q.getEmailVerificationTokenByIDStmt,
		getSessionByIDStmt:                     q.getSessionByIDStmt,
		insertCredentialsStmt:                  q.insertCredentialsStmt,
		insertEmailVerificationTokenStmt:       q.insertEmailVerificationTokenStmt,
		insertSessionStmt:                      q.insertSessionStmt,
		insertUserStmt:                         q.insertUserStmt,
		markEmailAsVerifiedStmt:                q.markEmailAsVerifiedStmt,
		rollbackStmt:                           q.rollbackStmt,
	}
}
