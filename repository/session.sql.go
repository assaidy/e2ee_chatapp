// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: session.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const deleteSessionForUser = `-- name: DeleteSessionForUser :execrows
delete from sessions where id = $1 and user_id = $2
`

type DeleteSessionForUserParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteSessionForUser(ctx context.Context, arg DeleteSessionForUserParams) (int64, error) {
	result, err := q.exec(ctx, q.deleteSessionForUserStmt, deleteSessionForUser, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getSessionByID = `-- name: GetSessionByID :one
select id, user_id, session_token, csrf_token, created_at, user_agent, ip_address, last_active from sessions where id = $1
`

func (q *Queries) GetSessionByID(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.queryRow(ctx, q.getSessionByIDStmt, getSessionByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.CsrfToken,
		&i.CreatedAt,
		&i.UserAgent,
		&i.IpAddress,
		&i.LastActive,
	)
	return i, err
}

const insertSession = `-- name: InsertSession :one
insert into sessions (id, user_id, session_token, csrf_token, user_agent, ip_address)
values ($1, $2, $3, $4, $5, $6)
returning id, user_id, session_token, csrf_token, created_at, user_agent, ip_address, last_active
`

type InsertSessionParams struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	SessionToken string
	CsrfToken    string
	UserAgent    string
	IpAddress    string
}

func (q *Queries) InsertSession(ctx context.Context, arg InsertSessionParams) (Session, error) {
	row := q.queryRow(ctx, q.insertSessionStmt, insertSession,
		arg.ID,
		arg.UserID,
		arg.SessionToken,
		arg.CsrfToken,
		arg.UserAgent,
		arg.IpAddress,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.CsrfToken,
		&i.CreatedAt,
		&i.UserAgent,
		&i.IpAddress,
		&i.LastActive,
	)
	return i, err
}

const updateSessionLastActive = `-- name: UpdateSessionLastActive :exec
update sessions set last_active = now() where id = $1
`

func (q *Queries) UpdateSessionLastActive(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.updateSessionLastActiveStmt, updateSessionLastActive, id)
	return err
}
