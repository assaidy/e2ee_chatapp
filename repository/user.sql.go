// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const checkEmail = `-- name: CheckEmail :one
select exists (select 1 from users where email = $1 for update)
`

func (q *Queries) CheckEmail(ctx context.Context, email string) (bool, error) {
	row := q.queryRow(ctx, q.checkEmailStmt, checkEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkUsername = `-- name: CheckUsername :one
select exists (select 1 from users where username = $1 for update)
`

func (q *Queries) CheckUsername(ctx context.Context, username string) (bool, error) {
	row := q.queryRow(ctx, q.checkUsernameStmt, checkUsername, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
delete from users where id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteUserByIDStmt, deleteUserByID, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, name, username, email, password_hash, verified, joined_at from users where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Verified,
		&i.JoinedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, name, username, email, password_hash, verified, joined_at from users where id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Verified,
		&i.JoinedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
insert into users (id, name, username, email, password_hash)
values ($1, $2, $3, $4, $5)
`

type InsertUserParams struct {
	ID           uuid.UUID
	Name         string
	Username     string
	Email        string
	PasswordHash string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.exec(ctx, q.insertUserStmt, insertUser,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
update users 
set
    name = $1,
    username = $2,
    email = $3,
    password_hash = $4
where id = $5
`

type UpdateUserParams struct {
	Name         string
	Username     string
	Email        string
	PasswordHash string
	ID           uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.ID,
	)
	return err
}
