// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.checkEmailStmt, err = db.PrepareContext(ctx, checkEmail); err != nil {
		return nil, fmt.Errorf("error preparing query CheckEmail: %w", err)
	}
	if q.checkUsernameStmt, err = db.PrepareContext(ctx, checkUsername); err != nil {
		return nil, fmt.Errorf("error preparing query CheckUsername: %w", err)
	}
	if q.deleteExpiredEmailVerificationTokensStmt, err = db.PrepareContext(ctx, deleteExpiredEmailVerificationTokens); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteExpiredEmailVerificationTokens: %w", err)
	}
	if q.deleteSessionForUserStmt, err = db.PrepareContext(ctx, deleteSessionForUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSessionForUser: %w", err)
	}
	if q.deleteUserByIDStmt, err = db.PrepareContext(ctx, deleteUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserByID: %w", err)
	}
	if q.getEmailVerificationTokenByIDStmt, err = db.PrepareContext(ctx, getEmailVerificationTokenByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetEmailVerificationTokenByID: %w", err)
	}
	if q.getSessionByIDStmt, err = db.PrepareContext(ctx, getSessionByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetSessionByID: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.insertEmailVerificationTokenStmt, err = db.PrepareContext(ctx, insertEmailVerificationToken); err != nil {
		return nil, fmt.Errorf("error preparing query InsertEmailVerificationToken: %w", err)
	}
	if q.insertSessionStmt, err = db.PrepareContext(ctx, insertSession); err != nil {
		return nil, fmt.Errorf("error preparing query InsertSession: %w", err)
	}
	if q.insertUserStmt, err = db.PrepareContext(ctx, insertUser); err != nil {
		return nil, fmt.Errorf("error preparing query InsertUser: %w", err)
	}
	if q.markEmailAsVerifiedStmt, err = db.PrepareContext(ctx, markEmailAsVerified); err != nil {
		return nil, fmt.Errorf("error preparing query MarkEmailAsVerified: %w", err)
	}
	if q.updateSessionLastActiveStmt, err = db.PrepareContext(ctx, updateSessionLastActive); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSessionLastActive: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.checkEmailStmt != nil {
		if cerr := q.checkEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkEmailStmt: %w", cerr)
		}
	}
	if q.checkUsernameStmt != nil {
		if cerr := q.checkUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkUsernameStmt: %w", cerr)
		}
	}
	if q.deleteExpiredEmailVerificationTokensStmt != nil {
		if cerr := q.deleteExpiredEmailVerificationTokensStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteExpiredEmailVerificationTokensStmt: %w", cerr)
		}
	}
	if q.deleteSessionForUserStmt != nil {
		if cerr := q.deleteSessionForUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSessionForUserStmt: %w", cerr)
		}
	}
	if q.deleteUserByIDStmt != nil {
		if cerr := q.deleteUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserByIDStmt: %w", cerr)
		}
	}
	if q.getEmailVerificationTokenByIDStmt != nil {
		if cerr := q.getEmailVerificationTokenByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEmailVerificationTokenByIDStmt: %w", cerr)
		}
	}
	if q.getSessionByIDStmt != nil {
		if cerr := q.getSessionByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionByIDStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.insertEmailVerificationTokenStmt != nil {
		if cerr := q.insertEmailVerificationTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertEmailVerificationTokenStmt: %w", cerr)
		}
	}
	if q.insertSessionStmt != nil {
		if cerr := q.insertSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertSessionStmt: %w", cerr)
		}
	}
	if q.insertUserStmt != nil {
		if cerr := q.insertUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertUserStmt: %w", cerr)
		}
	}
	if q.markEmailAsVerifiedStmt != nil {
		if cerr := q.markEmailAsVerifiedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markEmailAsVerifiedStmt: %w", cerr)
		}
	}
	if q.updateSessionLastActiveStmt != nil {
		if cerr := q.updateSessionLastActiveStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSessionLastActiveStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                       DBTX
	tx                                       *sql.Tx
	checkEmailStmt                           *sql.Stmt
	checkUsernameStmt                        *sql.Stmt
	deleteExpiredEmailVerificationTokensStmt *sql.Stmt
	deleteSessionForUserStmt                 *sql.Stmt
	deleteUserByIDStmt                       *sql.Stmt
	getEmailVerificationTokenByIDStmt        *sql.Stmt
	getSessionByIDStmt                       *sql.Stmt
	getUserByEmailStmt                       *sql.Stmt
	getUserByIDStmt                          *sql.Stmt
	insertEmailVerificationTokenStmt         *sql.Stmt
	insertSessionStmt                        *sql.Stmt
	insertUserStmt                           *sql.Stmt
	markEmailAsVerifiedStmt                  *sql.Stmt
	updateSessionLastActiveStmt              *sql.Stmt
	updateUserStmt                           *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                       tx,
		tx:                                       tx,
		checkEmailStmt:                           q.checkEmailStmt,
		checkUsernameStmt:                        q.checkUsernameStmt,
		deleteExpiredEmailVerificationTokensStmt: q.deleteExpiredEmailVerificationTokensStmt,
		deleteSessionForUserStmt:                 q.deleteSessionForUserStmt,
		deleteUserByIDStmt:                       q.deleteUserByIDStmt,
		getEmailVerificationTokenByIDStmt:        q.getEmailVerificationTokenByIDStmt,
		getSessionByIDStmt:                       q.getSessionByIDStmt,
		getUserByEmailStmt:                       q.getUserByEmailStmt,
		getUserByIDStmt:                          q.getUserByIDStmt,
		insertEmailVerificationTokenStmt:         q.insertEmailVerificationTokenStmt,
		insertSessionStmt:                        q.insertSessionStmt,
		insertUserStmt:                           q.insertUserStmt,
		markEmailAsVerifiedStmt:                  q.markEmailAsVerifiedStmt,
		updateSessionLastActiveStmt:              q.updateSessionLastActiveStmt,
		updateUserStmt:                           q.updateUserStmt,
	}
}
